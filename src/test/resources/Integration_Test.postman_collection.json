{
	"info": {
		"_postman_id": "d06fe8a7-02ce-4925-ae76-16438c7b84b2",
		"name": "Integration Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Getting AuthN/KC tokens for Users",
			"item": [
				{
					"name": "Token for auth.admin@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"AUTH_ADMIN_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "auth.admin@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for other.admin@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"OTHER_ADMIN_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "other.admin@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for postman.provider-admin@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"POSTMAN_PROVIDER_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "postman.provider-admin@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for postman.delegate@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"POSTMAN_DELEGATE_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "postman.delegate@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for postman.trustee@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"POSTMAN_TRUSTEE_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "postman.trustee@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for no.profile@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"NO_PROFILE_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "no.profile@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for rejprovider.delegate@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"REJPROVIDER_DELEGATE_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "rejprovider.delegate@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for all.roles@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"ALL_ROLES_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "all.roles@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for pending.provider@datakaveri.org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"PENDING_PROVIDER_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "pending.provider@datakaveri.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token for consumer@gmail.com",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let access_token = pm.response.json().access_token",
									"pm.environment.set(\"CONSUMER_GMAIL_TOKEN\",access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "consumer@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "account",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{KEYCLOAK_ENDPOINT}}/auth/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"{{KEYCLOAK_ENDPOINT}}"
							],
							"path": [
								"auth",
								"realms",
								"{{KEYCLOAK_REALM}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User Profile (POST /user/profile)",
			"item": [
				{
					"name": "No Token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty roles array - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "roles as string - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":\"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid role - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"role\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate roles - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"consumer\",\"consumer\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "orgId needed for delegate role - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"delegate\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "orgId needed for trustee role - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"trustee\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "orgId needed for provider role - [400] Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"provider\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgId does not match domain - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"consumer\",\n        \"delegate\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid phone - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"provider\"],\n    \"phone\":\"1232190\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid orgId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"provider\"],\n    \"orgId\":\"hsdhduw-293\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non existent orgId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"provider\", \"trustee\"],\n    \"orgId\":\"{{$randomUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful consumer registration - [201]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.environment.set(\"CONSUMER_GMAIL_USERID\", result.userId);",
									"    ",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"consumer\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"    console.log(clients[0].clientId);",
									"    pm.environment.set(\"CONSUMER_GMAIL_CLID\",clients[0].clientId);",
									"    pm.environment.set(\"CONSUMER_GMAIL_CLSC\",clients[0].clientSecret);",
									"",
									"    pm.expect(result).to.not.have.property(\"organization\");",
									"    pm.expect(result).to.not.have.property(\"phone\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\":[\"consumer\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful delegate, trustee and provider registration registration - [201] (All roles)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.environment.set(\"ALL_ROLES_USERID\", result.userId);",
									"",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"delegate\", \"trustee\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"    pm.expect(result).to.have.property(\"phone\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"delegate\",\n        \"provider\",\n        \"trustee\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\",\n    \"phone\": \"9989989981\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful provider registration - [201] (rejected provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.environment.set(\"REJPROVIDER_DELEGATE_USERID\", result.userId);",
									"",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.be.empty;",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"provider\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful provider registration - [201] (pending provider)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.environment.set(\"PENDING_PROVIDER_USERID\", result.userId);",
									"",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.be.empty;",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"    pm.expect(result).to.have.property(\"phone\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"provider\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\",\n    \"phone\": \"9989989981\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing user profile - [409]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"consumer\",\n        \"delegate\",\n        \"provider\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\",\n    \"phone\": \"9989989981\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Provider Registration Status (GET /admin/provider/registrations)",
			"item": [
				{
					"name": "No Token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not an admin - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not an auth admin - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid filter key - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const a = pm.environment.get(\"ALL_ROLES_USERID\"); ",
									"    const b = pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"); ",
									"    const c = pm.environment.get(\"PENDING_PROVIDER_USERID\"); ",
									"",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.lengthOf(3);",
									"    for(let i = 0;i < 3;i++)",
									"    {",
									"        pm.expect(result[i].userId).to.be.oneOf([a,b,c]);",
									"        pm.expect(result[i].status).to.be.equals(\"pending\");",
									"        pm.expect(result[i]).to.have.property(\"email\");",
									"        pm.expect(result[i]).to.have.property(\"name\");",
									"        pm.expect(result[i]).to.have.property(\"organization\");",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?a=approved",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "a",
									"value": "approved"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid filter value - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?filter=aslkhdjhdlashdahlsdkhadhauhdlajkd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "filter",
									"value": "aslkhdjhdlashdahlsdkhadhauhdlajkd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking pending regs - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const a = pm.environment.get(\"ALL_ROLES_USERID\"); ",
									"    const b = pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"); ",
									"    const c = pm.environment.get(\"PENDING_PROVIDER_USERID\"); ",
									"",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.lengthOf(3);",
									"    for(let i = 0;i < 3;i++)",
									"    {",
									"        pm.expect(result[i].userId).to.be.oneOf([a,b,c]);",
									"        pm.expect(result[i].status).to.be.equals(\"pending\");",
									"        pm.expect(result[i]).to.have.property(\"email\");",
									"        pm.expect(result[i]).to.have.property(\"name\");",
									"        pm.expect(result[i]).to.have.property(\"organization\");",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking pending regs with filter - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const a = pm.environment.get(\"ALL_ROLES_USERID\"); ",
									"    const b = pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"); ",
									"    const c = pm.environment.get(\"PENDING_PROVIDER_USERID\"); ",
									"",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.lengthOf(3);",
									"    for(let i = 0;i < 3;i++)",
									"    {",
									"        pm.expect(result[i].userId).to.be.oneOf([a,b,c]);",
									"        pm.expect(result[i].status).to.be.equals(\"pending\");",
									"        pm.expect(result[i]).to.have.property(\"email\");",
									"        pm.expect(result[i]).to.have.property(\"name\");",
									"        pm.expect(result[i]).to.have.property(\"organization\");",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?filter=pending",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "filter",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking rejected regs - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.lengthOf(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?filter=rejected",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "filter",
									"value": "rejected"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking approved regs (only default provider must be approved)- [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.lengthOf(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?filter=approved",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "filter",
									"value": "approved"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Provider Registration Status (PUT /admin/provider/registrations)",
			"item": [
				{
					"name": "No Token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "No request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hello\":1234\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array empty - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array invalid objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [1,2,{}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid userId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"123434342sf\",\n        \"status\":\"approved\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing status - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"123434342sf\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid status - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"{{$randomUUID}}\",\n        \"status\":\"pending\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing userId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"status\":\"pending\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate objects in request - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"approved\"\n        },\n        \n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"status\": \"rejected\"\n        },\n                {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"approved\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate userId but different status - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"rejected\"\n        },\n        \n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"status\": \"rejected\"\n        },\n                {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"approved\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not an admin - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"approved\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"status\": \"rejected\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not an auth admin - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"approved\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"status\": \"rejected\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Non existent User Id - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{$randomUUID}}\",\n            \"status\": \"approved\"\n        },\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"approved\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"status\": \"rejected\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject and approve providers Id - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    ",
									"    const a = pm.environment.get(\"ALL_ROLES_USERID\"); ",
									"    const b = pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"); ",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    let check = 0;",
									"    pm.expect(result).to.have.lengthOf(2);",
									"    for(let i = 0;i < 2;i++)",
									"    {",
									"        if(result[i].status === 'approved'){",
									"        pm.expect(result[i].userId).to.be.eq(a);",
									"        check++;",
									"        }",
									"",
									"        if(result[i].status === 'rejected'){",
									"        pm.expect(result[i].userId).to.be.eq(b);",
									"        check++;",
									"        }",
									"",
									"    }",
									"    pm.expect(check).to.be.eq(2);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"approved\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"status\": \"rejected\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject and approve again  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    ",
									"    const a = pm.environment.get(\"ALL_ROLES_USERID\");",
									"    const b = pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"); ",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"    const detail = body.detail;",
									"    pm.expect(detail).to.be.oneOf([a,b]);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"status\": \"rejected\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"status\": \"approved\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking pending regs after PUT - [200] Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const c = pm.environment.get(\"PENDING_PROVIDER_USERID\"); ",
									"",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.lengthOf(1);",
									"    ",
									"        pm.expect(result[0].userId).to.be.eq(c)",
									"        pm.expect(result[0].status).to.be.equals(\"pending\");",
									"        pm.expect(result[0]).to.have.property(\"email\");",
									"        pm.expect(result[0]).to.have.property(\"name\");",
									"        pm.expect(result[0]).to.have.property(\"organization\");",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?filter=pending",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "filter",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking rejected regs after PUT - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const body = pm.response.json();",
									"        const b = pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"); ",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.lengthOf(1);",
									"        pm.expect(result[0].userId).to.be.eq(b);",
									"        pm.expect(result[0].status).to.be.equals(\"rejected\");",
									"        pm.expect(result[0]).to.have.property(\"email\");",
									"        pm.expect(result[0]).to.have.property(\"name\");",
									"        pm.expect(result[0]).to.have.property(\"organization\");",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?filter=rejected",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "filter",
									"value": "rejected"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking approved regs after PUT- [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {   ",
									"    const body = pm.response.json();",
									"    const a = pm.environment.get(\"ALL_ROLES_USERID\"); ",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    let check = false;",
									"    pm.expect(result).to.have.lengthOf(2);",
									"      for(let i = 0;i < 2;i++)",
									"    {",
									"        if(result[i].userId === a){",
									"        pm.expect(result[i].status).to.be.equals(\"approved\");",
									"        pm.expect(result[i]).to.have.property(\"email\");",
									"        pm.expect(result[i]).to.have.property(\"name\");",
									"        pm.expect(result[i]).to.have.property(\"organization\");",
									"        check = true;",
									"    }",
									"    }",
									"    pm.expect(check).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/provider/registrations?filter=approved",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"provider",
								"registrations"
							],
							"query": [
								{
									"key": "filter",
									"value": "approved"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "View and Create Organizations (GET /organizations, POST /admin/organizations)",
			"item": [
				{
					"name": "No token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "List organizations - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.lengthOf(1);",
									"    pm.expect(result[0]).to.have.property(\"id\");",
									"    pm.expect(result[0]).to.have.property(\"name\");",
									"    pm.expect(result[0]).to.have.property(\"url\");",
									"",
									"    pm.expect(result[0].url).to.be.eq(\"datakaveri.org\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not an admin - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"abc\",\n    \"url\":\"123.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not an auth admin - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"abc\",\n    \"url\":\"123.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid URL - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"abc\",\n    \"url\":\"xyzabc.de0202@1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Name - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"1781$gjao*\",\n    \"url\":\"abc.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing name - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"url\":\"abc.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing URL - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Domain\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create organization when sub-domain added - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result.url).to.be.eq(\"example.com\");",
									"    pm.environment.set(\"NEW_ORG_ID\", result.id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Domain\",\n    \"url\":\"fresh.example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create organization normal - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result.url).to.be.eq(\"iudx.org\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Domain\",\n    \"url\":\"iudx.org\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Org already exists - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Domain\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid domain (protocol included)- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Domain\",\n    \"url\":\"https://iudx.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/admin/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List organizations after creation - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const newOrgId = pm.environment.get(\"NEW_ORG_ID\");",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.lengthOf(3);",
									"",
									"    let check = false;",
									"    result.forEach((r) => {",
									"        if(r.id ==newOrgId)",
									"            check = true;        ",
									"    });",
									"    pm.expect(check).to.be.true;",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User roles (PUT /user/profile)",
			"item": [
				{
					"name": "No token - [401] Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "No roles array  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Roles as string   - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"roles\":\"32389\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid roles  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"roles\":[\"provider\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate roles  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"consumer\",\n        \"consumer\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating roles and client secret regen - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"consumer\"\n    ],\n    \"clientId\":\"{{$randomUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating roles and clientId as array - [400] Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"consumer\"\n    ],\n    \"clientId\": [\n        1,\n        2,\n        3,\n        4\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User with no user profile - [404] Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"roles\":[\"consumer\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add consumer role to all.roles@datakaveri.org - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									" const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.environment.set(\"ALL_ROLES_USERID\", result.userId);",
									"",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"delegate\", \"consumer\", \"provider\", \"trustee\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"    pm.expect(result).to.have.property(\"phone\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"roles\":[\"consumer\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add existing role to all.roles@datakaveri.org [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
									"    const detail = body.detail.split(\" \");",
									"    pm.expect(detail).to.include(\"consumer\");",
									"    pm.expect(detail).to.include(\"delegate,\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"consumer\",\n        \"delegate\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "orgId required for delegate role  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"delegate\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "orgId required for trustee role  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"trustee\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgId does not match domain - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"delegate\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add delegate role for rejected provider  - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.environment.set(\"REJPROVIDER_DELEGATE_USERID\", result.userId);",
									"",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"delegate\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"delegate\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add trustee role for rejected provider  - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"delegate\", \"trustee\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roles\": [\n        \"trustee\"\n    ],\n    \"orgId\": \"3a054e6a-220d-4d49-8cbd-25447dfaa8ed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Regenerate client secret (PUT /user/profile)",
			"item": [
				{
					"name": "Empty body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid clientId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\":\"sdaulhudp*iudjnds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Trying to update both client secret and roles - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"{{$randomUUID}}\",\n    \"roles\": [\n        \"consumer\",\n        \"delegate\"\n    ],\n    \"orgId\": \"{{$randomUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "ClientId and roles as string - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"{{$randomUUID}}\",\n    \"roles\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer get RS token with original client ID, secret (save old client secret in env variable) [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"    pm.environment.set(\"OLD_CONSUMER_GMAIL_CLSC\", pm.environment.get(\"CONSUMER_GMAIL_CLSC\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{CONSUMER_GMAIL_CLID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{CONSUMER_GMAIL_CLSC}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider trying to regen client secret of consumer [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"{{CONSUMER_GMAIL_CLID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer regenerating non-existent client ID [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"{{$randomUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer successfully regen client secret (update client secret env variable with new one) [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");    ",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"consumer\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"    pm.environment.set(\"CONSUMER_GMAIL_CLSC\",clients[0].clientSecret);",
									"",
									"    pm.expect(result).to.not.have.property(\"organization\");",
									"    pm.expect(result).to.not.have.property(\"phone\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"{{CONSUMER_GMAIL_CLID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer Fails to get RS token with original client ID, secret [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{CONSUMER_GMAIL_CLID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{OLD_CONSUMER_GMAIL_CLSC}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer get RS token with client ID, new client secret [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"    pm.environment.set(\"OLD_CONSUMER_GMAIL_CLSC\", pm.environment.get(\"CONSUMER_GMAIL_CLSC\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{CONSUMER_GMAIL_CLID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{CONSUMER_GMAIL_CLSC}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List User (GET /user/profile)",
			"item": [
				{
					"name": "No token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/organizations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List User with no user profile - [404]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "List User pending provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"        const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.expect(result.userId).to.be.eq(pm.environment.get(\"PENDING_PROVIDER_USERID\"));",
									"    ",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.be.empty;",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"    pm.expect(result).to.have.property(\"phone\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "List User all roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"            const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.expect(result.userId).to.be.eq(pm.environment.get(\"ALL_ROLES_USERID\"));",
									"    ",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"consumer\",\"delegate\",\"provider\", \"trustee\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"    pm.expect(result).to.have.property(\"phone\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "List User consumer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"            const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.expect(result.userId).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"    ",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"consumer\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.not.have.property(\"organization\");",
									"    pm.expect(result).to.not.have.property(\"phone\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "List User rejected provider, delegate, trustee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"            const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    pm.expect(result.userId).to.be.eq(pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"));",
									"    ",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"delegate\", \"trustee\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"    pm.expect(result).to.not.have.property(\"phone\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "List User admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"            const result = body.results;",
									"",
									"    pm.expect(result).to.have.property(\"userId\");",
									"    ",
									"    pm.expect(result).to.have.property(\"email\");",
									"    pm.expect(result).to.have.property(\"name\");",
									"    pm.expect(result).to.have.property(\"keycloakId\");",
									"    pm.expect(result).to.have.property(\"clients\");",
									"    pm.expect(result.roles).to.have.members([\"admin\"]);",
									"",
									"    const clients = result.clients;",
									"    pm.expect(clients).length.greaterThan(0);",
									"    pm.expect(clients[0]).to.have.property(\"clientId\");",
									"    pm.expect(clients[0]).to.not.have.property(\"clientSecret\");",
									"    pm.expect(clients[0]).to.have.property(\"clientName\");",
									"",
									"    pm.expect(result).to.have.property(\"organization\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search for User (GET /user/profile)",
			"item": [
				{
					"name": "No token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "_091(saasjk&@jc.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "provider",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "hdajshdkadsd",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "",
								"type": "text"
							},
							{
								"key": "role",
								"value": "consumer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"    pm.expect(body.detail.split(' ')).to.include(\"both\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "role",
								"value": "provider",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "No user profile searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "consumer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pending provider searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "consumer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "consumer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delegate (no delegations set) searching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "consumer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin search for provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.title).to.be.eq(\"User found\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"email\", \"all.roles@datakaveri.org\");",
									"    pm.expect(result).to.have.property(\"userId\", pm.environment.get(\"ALL_ROLES_USERID\"));",
									"    pm.expect(result.name).to.not.be.empty;",
									"    pm.expect(result.organization).to.not.be.empty;",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "all.roles@datakaveri.org",
								"type": "text"
							},
							{
								"key": "role",
								"value": "provider",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider searching for consumer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.title).to.be.eq(\"User found\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"email\", \"consumer@gmail.com\");",
									"    pm.expect(result).to.have.property(\"userId\", pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"    pm.expect(result.name).to.not.be.empty;",
									"    pm.expect(result.organization).to.not.exist;",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "consumer@gmail.com",
								"type": "text"
							},
							{
								"key": "role",
								"value": "consumer",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate searching for delegate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.title).to.be.eq(\"User found\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"email\", \"rejprovider.delegate@datakaveri.org\");",
									"    pm.expect(result).to.have.property(\"userId\", pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"));",
									"    pm.expect(result.name).to.not.be.empty;",
									"    pm.expect(result.organization).to.not.be.empty;",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							},
							{
								"key": "role",
								"value": "delegate",
								"type": "text"
							},
							{
								"key": "email",
								"value": "rejprovider.delegate@datakaveri.org",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Searching for user who does have user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "no.profile@datakaveri.org",
								"type": "text"
							},
							{
								"key": "role",
								"value": "provider",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Searching for user who does not have role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							},
							{
								"key": "email",
								"value": "rejprovider.delegate@datakaveri.org",
								"type": "text"
							},
							{
								"key": "role",
								"value": "provider",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/user/profile",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Token API w/o policies",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Auth admin get token for auth server - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"authorization.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"authorization.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Admin - resource_server token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"rs:authorization.iudx.io\");",
											"    pm.expect(result.role).to.be.eq(\"admin\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth admin role cannot get token for RS server - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin cannot get token for resource_group - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin cannot get token for resource - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Provider",
					"item": [
						{
							"name": "Provider role - Cannot get resource_server token - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"authorization.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider role - Cannot get catalogue token - [403] (no cat admin policy)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\",\n    \"itemType\": \"resource\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider role - Cannot get token for resource_group owned by postman.provider-admin - [403] (no rs admin policy)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider role cannot get token for resource owned by postman.provider-admin - [403] (no rs admin policy)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "all.roles@datakaveri.org cannot get token for resource_group owned by postman.provider - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ALL_ROLES_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "all.roles@datakaveri.org cannot get token for resource owned by postman.provider - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ALL_ROLES_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consumer",
					"item": [
						{
							"name": "consumer@gmail.com cannot get token for resource group - no policy - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "consumer@gmail.com cannot get token for resource - no policy - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "consumer@gmail.com get rs.iudx.io token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Consumer resource_server token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.sub).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"rs:rs.iudx.io\");",
											"    pm.expect(result.role).to.be.eq(\"consumer\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delegate",
					"item": [
						{
							"name": "Delegate cannot get resource_server token - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"authorization.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate cannot get resource_group token (no delegation + no admin policy) - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate cannot get resource token (no delegation + no admin policy) - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate cannot get catalogue token - [400] (no admin policy + no delegation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "No Token- [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid itemId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-onedatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-onedatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-onedatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-onedatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-oneddatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-onedatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-oneatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-onedatakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing itemId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid itemType - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resourcklsa\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing itemType - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid role - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\":\"resource_group\",\n    \"role\": \"consum\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing role - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\":\"resource_group\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer does not have the requested delegate role - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "No user profile - [404]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pending provider - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"provider\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Policy (POST /policies)",
			"item": [
				{
					"name": "Provider",
					"item": [
						{
							"name": "Provider setting resource_server policy - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider setting policy for non-existent userId - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body.title.split(' ')).to.include(\"exist\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{$randomUUID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider setting resource_group policy for consumer - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider setting same policy for consumer (different constraints) - [409]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n                {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider setting duplicate policy - differing by constraints - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\", \"sub\"\n                ]\n            }\n        },\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider setting duplicate policy - differing by expiry time- [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\": \"3000-12-12T12:12:12\"\n        },\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Item does not exist - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n                {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/fake-item/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\":\"2030-12-12T00:00:00\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\":\"2030-12-12T00:00:00\"\n        },\n         {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\":\"2030-12-12T00:00:00\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Item exists, but does not belong to the provider - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n                        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/9c13a2308bb0919bf146be8681eb886922d29282/rs.iudx.io/invalid-resource-for-ownership-test\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\":\"2030-12-12T00:00:00\"\n        },\n                {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\":\"2030-12-12T00:00:00\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\":\"2030-12-12T00:00:00\"\n        },\n         {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\":\"2030-12-12T00:00:00\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider setting multiple resource, reosurce_group policies different users - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\": \"2030-12-12T00:00:00\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"file\"\n                ]\n            }\n        },\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\": \"2030-12-12T00:00:00\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "all.roles provider setting policy for resource not owned- [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ALL_ROLES_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Expiry time in the past - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{},\n        \"expiryTime\":\"2020-09-09T15:00:00\"\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "INCORRECT!! Test catalogue fetch - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{},\n        \"expiryTime\":\"2020-09-09T15:00:00\"\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Auth Admin setting policy for RS - [409]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n        \"itemId\":\"rs.iudx.io\",\n        \"itemType\":\"resource_server\",\n        \"constraints\":{}\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Admin setting existing (default) policy for provider - [409] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n        \"itemId\":\"authorization.iudx.io\",\n        \"itemType\":\"resource_server\",\n        \"constraints\":{}\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Admin setting policy for resource_group - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "RS,CAT Admin setting policy for resource_group - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "RS,CAT Admin setting multiple policies- [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"cat-test.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "RS,CAT Admin setting policy for non existent user - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body.detail).to.not.eq(\"[13d47a5a-213b-4ac8-b4db-10dbc70c48af]\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{$randomUUID}}\",\n            \"itemId\": \"cat-test.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "RS,CAT Admin setting multiple policies (for delegate)- [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"cat-test.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {},\n            \"expiryTime\": \"3000-12-12T12:12:12\"\n        },\n        {\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {},\n            \"expiryTime\": \"3000-12-12T12:12:12\"\n        },\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {},\n            \"expiryTime\": \"3000-12-12T12:12:12\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "RS,CAT Admin setting multiple policies, with existing policies in it- [409]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"cat-test.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {},\n            \"expiryTime\": \"2025-09-09T12:00:00\"\n        },\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"cat-test.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicates differing by expiry time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"cat-test.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {},\n            \"expiryTime\": \"2027-05-06T12:00:00\"\n        },\n        {\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Token test for delegate - still cannot get tokens",
					"item": [
						{
							"name": "Delegate cannot get resource_group token (no delegation + no provider policy) - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate cannot get resource token (no delegation + no provider policy) - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate cannot get catalogue token - [403] (No delegation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Auth delegate",
					"item": [
						{
							"name": "Invalid providerId - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8--10dbc70c4",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate (only role) calling API - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman.delegate setting policies that already exist - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman.delegate not sending providerId header - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman.delegate setting policy for all.roles - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman.delegate setting policy for resources they are not delegate for- [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/9c13a2308bb0919bf146be8681eb886922d29282/rs.iudx.io/invalid-resource-for-ownership-test\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman.delegate adding providerId header of user they are not delegate to - [401]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "{{ALL_ROLES_USERID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        },\n        {\n            \"userId\": \"{{ALL_ROLES_USERID}}\",\n            \"itemId\": \"datakaveri.org/9c13a2308bb0919bf146be8681eb886922d29282/rs.iudx.io/invalid-resource-for-ownership-test\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "No token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "No request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hello\":1234\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array invalid objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [1,2,{}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array empty - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid userId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"124443423242342433489327470283947028347284702847823842\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing userId- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid itemId- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-oneintegration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing itemId- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid itemType - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"roureabcd\",\n        \"constraints\":{}\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing itemType - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"constraints\":{}\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid constraints - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":\"90193023\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing constraints - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid expiryTime - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {},\n            \"expiryTime\": \"2133231-23-232T90320\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding userclass to User policy - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {},\n            \"userClass\":\"something\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding extra field apdId to User policy - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {},\n            \"apdId\":\"example.com\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding extra field apdId, userclass to User policy - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {},\n            \"apdId\":\"example.com\",\n            \"userClass\":\"something\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "ApdId instead of userId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {},\n            \"apdId\":\"example.com\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate elements - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        },\n                {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"constraints\": {}\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile user calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pending provider calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"userId\":\"{{CONSUMER_GMAIL_USERID}}\",\n        \"itemId\":\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n        \"itemType\":\"resource_group\",\n        \"constraints\":{}\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong itemId - itemType - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Policy (GET /policies)",
			"item": [
				{
					"name": "No token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "User with no profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pending provider listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PENDING_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman provider listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"        if(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\")",
									"        {",
									"            pm.expect(r.user.id).to.be.oneOf([pm.environment.get(\"CONSUMER_GMAIL_USERID\"),pm.environment.get(\"ALL_ROLES_USERID\"),pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\")]);",
									"            pm.expect(r.itemId.startsWith(\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/\")).to.be.true;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"        }",
									"        else{",
									"            pm.expect(r.user.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"            pm.expect(r.owner.email).to.be.oneOf([\"auth.admin@datakaveri.org\", \"other.admin@datakaveri.org\"]);",
									"            pm.expect(r.expiryTime).to.exist;",
									"            pm.expect(r.itemType).to.eq(\"resource_server\");",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.constraints).to.exist;",
									"        }",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    let id_array = [];",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"            pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
									"            pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"            pm.expect(r.user.email).to.be.eq(\"consumer@gmail.com\");",
									"            pm.expect(r.itemId.startsWith(\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/\")).to.be.true;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"            id_array.push({id:r.policyId});",
									"    })",
									"    pm.environment.set(\"CONSUMER_POLICY_IDS\", JSON.stringify(id_array));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delegate listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    let id_array = [];",
									"    body.results.forEach((r) =>{",
									"            pm.expect(r.owner.id).to.be.oneOf([\"fc88ed68-8524-4873-8dd8-41d5a4f400f1\", ",
									"\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\"])",
									"            pm.expect(r.user.id).to.be.eq(pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"));",
									"            pm.expect(r.user.email).to.be.eq(\"rejprovider.delegate@datakaveri.org\");",
									"            if([\"resource_group\", \"resource\"].includes(r.itemType))",
									"                pm.expect(r.itemId.startsWith(\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/\")).to.be.true;",
									"            if(r.itemType == 'resource_server')",
									"                pm.expect(r.expiryTime.startsWith(\"3000\")).to.be.true;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"            if(r.owner.id == '13d47a5a-213b-4ac8-b4db-10dbc70c48af')",
									"            id_array.push({id:r.policyId});",
									"    })",
									"        pm.environment.set(\"DELEGATE_POLICY_IDS\", JSON.stringify(id_array));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delegate trying to list as auth delegate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "all.roles listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "postman.delegate listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results.length).to.be.eq(1);",
									"   body.results.forEach((r) =>{",
									"            pm.expect(r.owner.id).to.be.eq( \"ce6a3f9a-1df2-40ae-a15d-9a5e56f762f6\")",
									"            pm.expect(r.user.id).to.be.eq(\"d2c19c78-ff19-43ac-bf88-418596b9228a\");",
									"            pm.expect(r.itemType == 'resource_server').to.be.true;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "postman.delegate as auth delegate listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"        pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
									"            pm.expect(r.user.id).to.be.oneOf([pm.environment.get(\"CONSUMER_GMAIL_USERID\"),pm.environment.get(\"ALL_ROLES_USERID\"),pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\")]);",
									"            pm.expect(r.itemId.startsWith(\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/\")).to.be.true;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.itemType).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Token API w/ policies",
			"item": [
				{
					"name": "Provider",
					"item": [
						{
							"name": "Provider role - Get token for resource_group owned by postman.provider-admin - [200] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Provider-resource_group token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\");",
											"    pm.expect(result.role).to.be.eq(\"provider\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider role - Get token for resource owned by postman.provider-admin - [200] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Provider-resource token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\");",
											"    pm.expect(result.role).to.be.eq(\"provider\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider role - get catalogue token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"cat-test.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\",\n    \"itemType\": \"resource\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Provider-catalogue token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"cat-test.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\");",
											"    pm.expect(result.role).to.be.eq(\"provider\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "TEST CATALOGUE FLOW FOR NEW PROVIDER - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"cat-test.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\",\n    \"itemType\": \"resource\",\n    \"role\": \"provider\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consumer",
					"item": [
						{
							"name": "Consumer get token for resource_group [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect consumer-resource_group token - [200] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\");",
											"    pm.expect(result.role).to.be.eq(\"consumer\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer get token for resource in permitted resource_group [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect consumer-resource  in permitted resource_group token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\");",
											"    pm.expect(result.role).to.be.eq(\"consumer\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "all.roles get token for resource_group  as consumer [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ALL_ROLES_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect all.roles-resource_group token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\");",
											"    pm.expect(result.role).to.be.eq(\"consumer\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer get token for resource [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect consumer-resource token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\");",
											"    pm.expect(result.role).to.be.eq(\"consumer\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "all.roles cannot get token for resource_group  as delegate [403] (no delegation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ALL_ROLES_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Client Id secret flow",
					"item": [
						{
							"name": "Invalid clientId[400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "1234434",
										"type": "text"
									},
									{
										"key": "clientSecret",
										"value": "{{CONSUMER_GMAIL_CLSC}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid clientSecret - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{CONSUMER_GMAIL_CLID}}",
										"type": "text"
									},
									{
										"key": "clientSecret",
										"value": "alalalalalalalalalalalalalalalalalalalal",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consumer get token for resource_group [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{CONSUMER_GMAIL_CLID}}",
										"type": "text"
									},
									{
										"key": "clientSecret",
										"value": "{{CONSUMER_GMAIL_CLSC}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect consumer-resource_group token - [200] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\");",
											"    pm.expect(result.role).to.be.eq(\"consumer\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Non existent client ID[401]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{$randomUUID}}",
										"type": "text"
									},
									{
										"key": "clientSecret",
										"value": "{{CONSUMER_GMAIL_CLSC}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong client Secret - [401]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{CONSUMER_GMAIL_CLID}}",
										"type": "text"
									},
									{
										"key": "clientSecret",
										"value": "e980d5bda287fa4808f8b6d32a3d7f45027aefdc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing client ID[200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientSecret",
										"value": "{{CONSUMER_GMAIL_CLSC}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing client secret [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{CONSUMER_GMAIL_CLID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delegate - still can't get tokens",
					"item": [
						{
							"name": "Delegate cannot get resource_group token (no delegation) - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate cannot get resource token (no delegation) - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate cannot get catalogue token - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Revoke Token API",
			"item": []
		},
		{
			"name": "Create Delegation",
			"item": [
				{
					"name": "Auth Delegate",
					"item": [
						{
							"name": "Postman delegate setting auth delegate - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body.title).to.be.eq(\"Auth delegate may not create auth delegations\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"resSerId\":\"authorization.iudx.io\",\n        \"userId\":\"{{REJPROVIDER_DELEGATE_USERID}}\"\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman delegate setting delegation for admin- [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"    pm.expect(body).to.have.property(\"detail\", \"ce6a3f9a-1df2-40ae-a15d-9a5e56f762f6\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"ce6a3f9a-1df2-40ae-a15d-9a5e56f762f6\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"{{ALL_ROLES_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman delegate setting delegation for consumer - [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"    pm.expect(body).to.have.property(\"detail\", pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"{{ALL_ROLES_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman delegate setting all.roles as rs and auth delegate- [403]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{ALL_ROLES_USERID}}\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"{{ALL_ROLES_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Provider",
					"item": [
						{
							"name": "Postman provider setting auth delegate - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [{\n        \"resSerId\":\"authorization.iudx.io\",\n        \"userId\":\"{{REJPROVIDER_DELEGATE_USERID}}\"\n    }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman provider setting delegation for invalid server - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        },\n        {\n            \"resSerId\": \"someserver.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman provider setting delegation for non existent user- [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{$randomUUID}}\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman provider setting existing delegation - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        },\n        {\n            \"resSerId\": \"authorization.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman provider setting existing delegation made by their delegate - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{ALL_ROLES_USERID}}\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"{{ALL_ROLES_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman provider setting multiple delegation - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						},
						{
							"name": "all.roles setting rs, cat delegation for postman.delegate - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ALL_ROLES_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"resSerId\":\"authorization.iudx.io\",\n            \"userId\": \"d2c19c78-ff19-43ac-bf88-418596b9228a\"\n        },\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"d2c19c78-ff19-43ac-bf88-418596b9228a\"\n        },\n        {\n            \"resSerId\": \"cat-test.iudx.io\",\n            \"userId\": \"d2c19c78-ff19-43ac-bf88-418596b9228a\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies",
										"delegations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "No request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hello\":1234\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array invalid objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [1,2,{}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array empty - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"authorization.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        },\n        {\n            \"resSerId\": \"authorization.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"resSerId\":\"authorization.iudx.io\",\n        \"userId\":\"{{REJPROVIDER_DELEGATE_USERID}}\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"resSerId\":\"authorization.iudx.io\",\n        \"userId\":\"{{REJPROVIDER_DELEGATE_USERID}}\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"resSerId\":\"authorization.iudx.io\",\n        \"userId\":\"{{REJPROVIDER_DELEGATE_USERID}}\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delegate calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [{\n        \"resSerId\":\"authorization.iudx.io\",\n        \"userId\":\"{{REJPROVIDER_DELEGATE_USERID}}\"\n    }]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid resSerId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"authorization.iudx.iosdaded2jd8djn288923 83xn42\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing resSerId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid userId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"d2c19c78-ff19-43ac-bf88-418596b922}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing userId- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"resSerId\": \"rs.iudx.io\",\n            \"userId\": \"{{REJPROVIDER_DELEGATE_USERID}}{{REJPROVIDER_DELEGATE_USERID}}{{REJPROVIDER_DELEGATE_USERID}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Delegations",
			"item": [
				{
					"name": "No token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API  - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin calling API  - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile calling API  - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.Provider calling API  - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    let delegation_ids = [];",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"        delegation_ids.push({id:r.id});",
									"        pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
									"          pm.expect(r.url).to.exist;",
									"            pm.expect(r.url).to.be.oneOf([\"authorization.iudx.io\",\"rs.iudx.io\",\"cat-test.iudx.io\"]);",
									"    })",
									"    pm.environment.set(\"POSTMAN_PROVIDER_DELEGATION_IDS\", JSON.stringify(delegation_ids));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.delegate calling API  - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"        pm.expect(r.user.id == \"d2c19c78-ff19-43ac-bf88-418596b9228a\").to.be.true;",
									"            pm.expect(r.owner.id).to.be.oneOf([\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",pm.environment.get(\"ALL_ROLES_USERID\")]);",
									"            pm.expect(r.url).to.exist;",
									"            pm.expect(r.url).to.be.oneOf([\"authorization.iudx.io\",\"rs.iudx.io\",\"cat-test.iudx.io\"]);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.delegate as auth delegate for postman.provider calling API  - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"        pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
									"            pm.expect(r.user.id).to.be.oneOf([pm.environment.get(\"ALL_ROLES_USERID\"),pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\")]);",
									"            pm.expect(r.url).to.exist;",
									"            pm.expect(r.url != \"authorization.iudx.io\").to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.delegate as auth delegate for all.roles calling API  - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"        pm.expect(r.owner.id == pm.environment.get(\"ALL_ROLES_USERID\")).to.be.true;",
									"            pm.expect(r.user.id).to.be.oneOf([\"d2c19c78-ff19-43ac-bf88-418596b9228a\",pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\")]);",
									"            pm.expect(r.url).to.exist;",
									"            pm.expect(r.url != \"authorization.iudx.io\").to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "{{ALL_ROLES_USERID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "all.roles calling API  - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const postman_delegate_deleg_ids = [];",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"            pm.expect(r.user.id).to.be.oneOf([\"d2c19c78-ff19-43ac-bf88-418596b9228a\",pm.environment.get(\"ALL_ROLES_USERID\")]);",
									"            pm.expect(r.url).to.exist;",
									"",
									"            if(r.user.id == \"d2c19c78-ff19-43ac-bf88-418596b9228a\" && r.owner.id == pm.environment.get(\"ALL_ROLES_USERID\"))",
									"            {",
									"                postman_delegate_deleg_ids.push({id:r.id});",
									"            }",
									"    })",
									"    pm.environment.set(\"POSTMAN_DELEGATE_DELEGATION_IDS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get token w/ policies and delegations",
			"item": [
				{
					"name": "Delegate - can now get tokens",
					"item": [
						{
							"name": "Delegate can get resource_group token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect delegate-resource_group token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\");",
											"    pm.expect(result.role).to.be.eq(\"delegate\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate can get resource token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect delegate-resource token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\");",
											"    pm.expect(result.role).to.be.eq(\"delegate\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate can get resource token for resource w/ resource_group policy - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
											"",
											"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect delegate-resource token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\");",
											"    pm.expect(result.role).to.be.eq(\"delegate\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delegate can get catalogue token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"accessToken\");",
											"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.server).to.be.eq(\"cat-test.iudx.io\");",
											"",
											"    pm.environment.set(\"CAT_TOKEN\", result.accessToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\",\n    \"itemType\": \"resource\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect delegate-cat token - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    const moment = require('moment');",
											"",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    const result = body.results;",
											"    pm.expect(result).to.have.property(\"sub\");",
											"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
											"    pm.expect(result.aud).to.be.eq(\"cat-test.iudx.io\");",
											"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/cat-test.iudx.io/catalogue/crud\");",
											"    pm.expect(result.role).to.be.eq(\"delegate\");",
											"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
											"    pm.expect(result.cons).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accessToken\" : \"{{CAT_TOKEN}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "all.roles get token for resource_group  as delegate [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ALL_ROLES_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"delegate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete Policy",
			"item": [
				{
					"name": "No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "No request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hello\":1234\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array invalid objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [1,2,{}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"id\": \"921f439e-7c9b-40b4-b6a7-9cb1e6771eef\"\n        },\n        {\n            \"id\": \"921f439e-7c9b-40b4-b6a7-9cb1e6771eef\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"id\": \"921f439e-7c9b-40b4-b6a7-9cb1e6771eef\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{CONSUMER_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Other Provider calling API  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{CONSUMER_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{CONSUMER_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider trying to delete again- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{CONSUMER_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate trying to delete that have already been deleted without providerId header- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const consumer_ids = JSON.parse(pm.environment.get(\"CONSUMER_POLICY_IDS\"));",
									"const delegate_ids = JSON.parse(pm.environment.get(\"DELEGATE_POLICY_IDS\"));",
									"",
									"pm.environment.set(\"MERGED_POLICY_IDS\", JSON.stringify(consumer_ids.concat(delegate_ids)))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{MERGED_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate trying to delete that have already been deleted  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const consumer_ids = JSON.parse(pm.environment.get(\"CONSUMER_POLICY_IDS\"));",
									"const delegate_ids = JSON.parse(pm.environment.get(\"DELEGATE_POLICY_IDS\"));",
									"",
									"pm.environment.set(\"MERGED_POLICY_IDS\", JSON.stringify(consumer_ids.concat(delegate_ids)))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{MERGED_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate putting invalid providerId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-f",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{DELEGATE_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate putting providerId of provider who does not own the policies - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "{{ALL_ROLES_USERID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{DELEGATE_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate trying to delete without providerId- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{DELEGATE_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate successful delete - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{DELEGATE_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer can't get token for resource_group [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Policy Request",
			"item": [
				{
					"name": "No token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty body - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "No request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hello\":1234\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array invalid objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [1,2,{}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid itemId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf<script>38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"subs\",\n                    \"file\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing itemId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"subs\",\n                    \"file\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid itemType- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resourcae\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing itemType- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid expiryDuration - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"ABCDEFG\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing expiryDuration - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resourcae\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid constraints - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": 1280487092847918\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing constraints - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delegate calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API, item belongs to non-existent provider - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/pune-env-flood/FWR035\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API, item does not exist - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two-fake\",\n            \"itemType\": \"resource_group\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API, itemId-ItemType mismatch - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n                {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer making resource_group request success - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results[0]).to.have.property(\"requestId\");",
									"    pm.expect(body.results[0]).to.have.property(\"itemId\",\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\" );",
									"    pm.expect(body.results[0]).to.have.property(\"itemType\",\"resource_group\" );",
									"        pm.expect(body.results[0].user).to.not.be.empty;",
									"        pm.expect(body.results[0].owner).to.not.be.empty;",
									"        pm.expect(body.results[0].owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\")",
									"",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"expiryDuration\": \"P20Y\",\n            \"constraints\": {}\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer making existing request (different duration and constraints)- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P5Y\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P5Y\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"expiryDuration\": \"P1Y4M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer making resource request success - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results[0]).to.have.property(\"requestId\");",
									"    pm.expect(body.results[0]).to.have.property(\"itemId\",\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\" );",
									"    pm.expect(body.results[0]).to.have.property(\"itemType\",\"resource\" );",
									"        pm.expect(body.results[0].user).to.not.be.empty;",
									"        pm.expect(body.results[0].owner).to.not.be.empty;",
									"        pm.expect(body.results[0].owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\")",
									"",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"expiryDuration\": \"P1Y\",\n            \"constraints\": {\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "View Policy Requests",
			"item": [
				{
					"name": "No token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delegate calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(3);",
									"    result.forEach((r) => {",
									"        pm.expect(r.owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"        pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"        pm.expect(r.status).to.be.eq(\"pending\");",
									"        if(r.itemType == 'resource_group')",
									"            pm.environment.set(\"REQUEST_ID_RES_GROUP\", r.requestId);",
									"        if(r.itemType == 'resource')",
									"            pm.environment.set(\"REQUEST_ID_RES\", r.requestId);",
									"",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "all.roles calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.provider calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(3);",
									"    result.forEach((r) => {",
									"        pm.expect(r.owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"        pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"        pm.expect(r.status).to.be.eq(\"pending\");",
									"        ",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman delegate calling API as auth delegate for postman.provider - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(3);",
									"    result.forEach((r) => {",
									"        pm.expect(r.owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"        pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"        pm.expect(r.status).to.be.eq(\"pending\");",
									"        ",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman delegate calling API as auth delegate for all.roles- [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "{{ALL_ROLES_USERID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Policy Request",
			"item": [
				{
					"name": "No token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "No request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hello\":1234\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array invalid objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [1,2,{}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        },\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate request IDs, other fields different - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        },\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P1Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delegate calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing requestId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid requestId - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"qwe9qieuqiweuqioeuioqweuqiruioeruoiere\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\": \"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing status - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid status - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\":\"pending\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid expiryDuration - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7TIUSJA\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid constraints - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"expiryDuration\": \"P7Y2M10DT2H30M\",\n            \"status\":\"approved\",\n            \"constraints\": 12334\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status approved, missing expiryDuration (approve one of the resource group request) - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status rejected (reject the resource request) - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES}}\",\n            \"status\":\"rejected\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve already approved - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid requestId- [404]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{$randomUUID}}\",\n            \"status\":\"approved\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject an approved request- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"requestId\": \"{{REQUEST_ID_RES_GROUP}}\",\n            \"status\":\"rejected\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\",\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "View Policy Requests after Update",
			"item": [
				{
					"name": "Consumer calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const approved_rid = pm.environment.get(\"REQUEST_ID_RES_GROUP\");",
									"    const rejected_rid = pm.environment.get(\"REQUEST_ID_RES\");",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(3);",
									"    result.forEach((r) => {",
									"        pm.expect(r.owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"        pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"        if(r.requestId === approved_rid)",
									"        {",
									"            pm.expect(r.status).to.be.eq(\"approved\");",
									"            pm.environment.set(\"ACCEPTED_RESOURCE_GROUP\", r.itemId);",
									"        }",
									"        else if(r.requestId === rejected_rid){",
									"            pm.expect(r.status).to.be.eq(\"rejected\");",
									"            pm.environment.set(\"REJECTED_RESOURCE\", r.itemId);",
									"        }            ",
									"        else {",
									"            pm.expect(r.status).to.be.eq(\"pending\");",
									"            pm.environment.set(\"PENDING_RESOURCE_GROUP\", r.itemId);",
									"        }",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "all.roles calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.provider calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const approved_rid = pm.environment.get(\"REQUEST_ID_RES_GROUP\");",
									"    const rejected_rid = pm.environment.get(\"REQUEST_ID_RES\");",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(3);",
									"    result.forEach((r) => {",
									"        pm.expect(r.owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"        pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"        if(r.requestId === approved_rid)",
									"            pm.expect(r.status).to.be.eq(\"approved\");",
									"        else if(r.requestId === rejected_rid)",
									"            pm.expect(r.status).to.be.eq(\"rejected\");",
									"        else  ",
									"            pm.expect(r.status).to.be.eq(\"pending\");",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman delegate calling API as auth delegate for postman.provider - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const approved_rid = pm.environment.get(\"REQUEST_ID_RES_GROUP\");",
									"    const rejected_rid = pm.environment.get(\"REQUEST_ID_RES\");",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(3);",
									"    result.forEach((r) => {",
									"        pm.expect(r.owner.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"        pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"        if(r.requestId === approved_rid)",
									"            pm.expect(r.status).to.be.eq(\"approved\");",
									"        else if(r.requestId === rejected_rid)",
									"            pm.expect(r.status).to.be.eq(\"rejected\");",
									"        else  ",
									"            pm.expect(r.status).to.be.eq(\"pending\");",
									"",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman delegate calling API as auth delegate for all.roles- [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.length(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "{{ALL_ROLES_USERID}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/requests",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Consumer request for tokens for different policy request states",
			"item": [
				{
					"name": "Consumer get token for accepted resource_group [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{ACCEPTED_RESOURCE_GROUP}}\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer fails to get token for rejected resource [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{REJECTED_RESOURCE}}\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer fails to get token for pending resource group[403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{PENDING_RESOURCE_GROUP}}\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create APD",
			"item": [
				{
					"name": "No Token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid name - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example(*(\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing URL - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Name - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile - [404]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Calling API as provider - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Calling API as consumer - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Calling API as delegate - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Calling API as admin - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid URL (http) - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"https://example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid URL (port) - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com:8080\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid URL (path) - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com/apd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid URL (invalid TLD) - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com.in.oia\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registered APD successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    let res = body.results;",
									"    pm.environment.set(\"TEST_APD_ID\", res.apdId);",
									"    pm.expect(res.name).to.be.eq(\"Integration APD\");",
									"    let url = pm.environment.get(\"TEST_APD_URL\");",
									"    let id = pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\");",
									"    pm.expect(res.url).to.be.eq(url);",
									"    pm.expect(res.status).to.be.eq(\"pending\");",
									"    pm.expect(res.owner.id).to.be.eq(id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Integration APD\",\n    \"url\":\"{{TEST_APD_URL}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing URL - [409]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Some other name APD\",\n    \"url\":\"{{TEST_APD_URL}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List APD",
			"item": [
				{
					"name": "No Token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile - [404]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing as Auth Admin - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results.length).to.be.eq(4);",
									"    body.results.forEach((r) => {",
									"        pm.expect(r.status).to.be.oneOf([\"active\", \"inactive\",\"pending\"]);",
									"    })",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing as postman.trustee - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results.length).to.be.eq(3);",
									"    body.results.forEach((r) => {",
									"        pm.expect(r.status).to.be.oneOf([\"active\", \"inactive\",\"pending\"]);",
									"        pm.expect(r.owner.id).to.be.eq(\"dafa6537-18ab-4b6a-9deb-35822e6755d4\");",
									"    })",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing as other trustee (rejprovider.delegate user) - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results.length).to.be.eq(2);",
									"    body.results.forEach((r) => {",
									"        pm.expect(r.status).to.be.oneOf([\"active\", \"pending\"]);",
									"        if(r.status == 'pending')",
									"            pm.expect(r.owner.id).to.be.eq(pm.environment.get(\"REJPROVIDER_DELEGATE_USERID\"));",
									"        if(r.status == 'active')",
									"            pm.expect(r.owner.id).to.be.eq(\"dafa6537-18ab-4b6a-9deb-35822e6755d4\");        ",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing as consumer - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results.length).to.be.eq(1);",
									"    body.results.forEach((r) => {",
									"        pm.expect(r.status).to.be.oneOf([\"active\"]);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing as provider - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results.length).to.be.eq(1);",
									"    body.results.forEach((r) => {",
									"        pm.expect(r.status).to.be.oneOf([\"active\"]);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing as other admin - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    pm.expect(body.results.length).to.be.eq(1);",
									"    body.results.forEach((r) => {",
									"        pm.expect(r.status).to.be.oneOf([\"active\"]);",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update APD",
			"item": [
				{
					"name": "No Token - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"{{$randomUUID}}\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile - [404]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"{{$randomUUID}}\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Body - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"apdId\": \"{{$randomUUID}}\",\n    \"status\": \"active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing id - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing status - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"{{$randomUUID}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid ID - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"122344\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid status - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"{{$randomUUID}}\",\n            \"status\": \"deleted\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate objects - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        },\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Same IDs in different objects - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        },\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"inactive\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Other admin calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{OTHER_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider calling API - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Other trustee (rejprovider.delegate) calling API on APD ID they do not own - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"    pm.expect(body.detail).to.be.eq(\"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth admin change pending -> active, active -> inactive, inactive -> active, for postman.trustee APDs - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    let res = body.results;",
									"    count = 0;",
									"    res.forEach(obj => {",
									"        if(obj.apdId === '8e2741ad-34a3-4de2-a9e5-b97631f2fd8f'){",
									"        pm.expect(obj.status).to.be.eq(\"active\");",
									"        count++;",
									"        }",
									"        if(obj.apdId === '4f51cee5-e6ce-4e31-8c30-66d298c7d4a6'){",
									"        pm.expect(obj.status).to.be.eq(\"inactive\");",
									"        count++;",
									"        }",
									"        if(obj.apdId === '1b988be6-cc13-422b-bca0-9ccb98a5b30f'){",
									"        pm.expect(obj.status).to.be.eq(\"active\");",
									"        count++;",
									"        }",
									"    })",
									"    pm.expect(count).to.be.eq(3);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        },\n        {\n            \"apdId\": \"4f51cee5-e6ce-4e31-8c30-66d298c7d4a6\",\n            \"status\": \"inactive\"\n        },\n        {\n            \"apdId\": \"1b988be6-cc13-422b-bca0-9ccb98a5b30f\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth admin repeating prev request - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        },\n        {\n            \"apdId\": \"4f51cee5-e6ce-4e31-8c30-66d298c7d4a6\",\n            \"status\": \"inactive\"\n        },\n        {\n            \"apdId\": \"1b988be6-cc13-422b-bca0-9ccb98a5b30f\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "postman.trustee changing 2 actives -> inactive and inactive -> active (not allowed) - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"inactive\"\n        },\n        {\n            \"apdId\": \"4f51cee5-e6ce-4e31-8c30-66d298c7d4a6\",\n            \"status\": \"active\"\n        },\n        {\n            \"apdId\": \"1b988be6-cc13-422b-bca0-9ccb98a5b30f\",\n            \"status\": \"inactive\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "postman.trustee changing 2 actives -> inactive and inactive -> pending - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    let res = body.results;",
									"    count = 0;",
									"    res.forEach(obj => {",
									"        if(obj.apdId === '8e2741ad-34a3-4de2-a9e5-b97631f2fd8f'){",
									"        pm.expect(obj.status).to.be.eq(\"inactive\");",
									"        count++;",
									"        }",
									"        if(obj.apdId === '4f51cee5-e6ce-4e31-8c30-66d298c7d4a6'){",
									"        pm.expect(obj.status).to.be.eq(\"pending\");",
									"        count++;",
									"        }",
									"        if(obj.apdId === '1b988be6-cc13-422b-bca0-9ccb98a5b30f'){",
									"        pm.expect(obj.status).to.be.eq(\"inactive\");",
									"        count++;",
									"        }",
									"    })",
									"    pm.expect(count).to.be.eq(3);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"inactive\"\n        },\n        {\n            \"apdId\": \"4f51cee5-e6ce-4e31-8c30-66d298c7d4a6\",\n            \"status\": \"pending\"\n        },\n        {\n            \"apdId\": \"1b988be6-cc13-422b-bca0-9ccb98a5b30f\",\n            \"status\": \"inactive\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth admin setting inactive -> pending (not allowed) and test APD pending -> active - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"pending\"\n        },\n        {\n            \"apdId\": \"{{TEST_APD_ID}}\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth admin setting inactive -> active and test APD pending -> inactive (not allowed) - [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        },\n        {\n            \"apdId\": \"{{TEST_APD_ID}}\",\n            \"status\": \"inactive\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth admin setting inactive -> active and test APD pending -> active - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    let apdId = pm.environment.get(\"TEST_APD_ID\");",
									"    let res = body.results;",
									"    count = 0;",
									"    res.forEach(obj => {",
									"        if(obj.apdId === '8e2741ad-34a3-4de2-a9e5-b97631f2fd8f'){",
									"        pm.expect(obj.status).to.be.eq(\"active\");",
									"        count++;",
									"        }",
									"        if(obj.apdId === apdId){",
									"        pm.expect(obj.status).to.be.eq(\"active\");",
									"        count++;",
									"        }",
									"    })",
									"    pm.expect(count).to.be.eq(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"active\"\n        },\n        {\n            \"apdId\": \"{{TEST_APD_ID}}\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - postman.trustee setting pendingapd.integration-iudx.io to inactive - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"inactive\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - postman.trustee setting pendingapd.integration-iudx.io to pending - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"8e2741ad-34a3-4de2-a9e5-b97631f2fd8f\",\n            \"status\": \"pending\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cleanup - auth.admin setting activeapd.integration-iudx.io to active - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"apdId\": \"4f51cee5-e6ce-4e31-8c30-66d298c7d4a6\",\n            \"status\": \"active\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/apd",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"apd"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create APD Policy and Trustee-Provider policies",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Setup - Get all existing policies for consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"    let id_array = [];",
											"    pm.expect(body.results).to.not.be.empty;",
											"    body.results.forEach((r) =>{",
											"            pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
											"            pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
											"            pm.expect(r.user.email).to.be.eq(\"consumer@gmail.com\");",
											"            pm.expect(r.itemId.startsWith(\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/\")).to.be.true;",
											"            pm.expect(r.constraints).to.exist;",
											"            pm.expect(r.policyId).to.exist;",
											"            pm.expect(r.expiryTime).to.exist;",
											"            id_array.push({id:r.policyId});",
											"    })",
											"    pm.environment.set(\"CONSUMER_POLICY_IDS\", JSON.stringify(id_array));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setup - Delete policies that consumer had",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {{CONSUMER_POLICY_IDS}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Validation",
					"item": [
						{
							"name": "Invalid APD URL - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"userClass\":\"userClass\",\n            \"apdId\": 123,\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing APD URL - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"userClass\":\"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Putting userId instead of APD URL in APD policy object - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"userId\": \"this should not be here\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding extra userId field in APD policy object - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"userId\": \"this should not be here\",\n            \"apdId\":\"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid item ID - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/????\",\n            \"itemType\": \"resource\",\n            \"apdId\":\"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing item ID - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemType\": \"resource\",\n            \"apdId\":\"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid item type (apd not allowed )- [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"apd\",\n            \"userClass\":\"userClass\",\n            \"apdId\": \"example.com\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid item type (resource_server not allowed )- [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"rs.iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"userClass\":\"userClass\",\n            \"apdId\": \"example.com\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing itemType - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"rs.iudx.io\",\n            \"userClass\":\"userClass\",\n            \"apdId\": \"example.com\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing constraints - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"example.com\",\n            \"userClass\": \"userClass\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid constraints - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\":\"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": []\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userClass - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"example.com\",\n            \"userClass\": \"?\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing userClass - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"example.com\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid expiryTime - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {},\n            \"expiryTime\": \"2133231-23-232T90320\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate requests - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"example.com\",\n            \"userClass\": \"userClass\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trustee APD item Type policies",
					"item": [
						{
							"name": "Admin setting 'apd' policy - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{AUTH_ADMIN_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"{{TEST_APD_URL}}\",\n            \"itemType\": \"apd\",\n            \"userId\":\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider setting 'apd' policy - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"{{TEST_APD_URL}}\",\n            \"itemType\": \"apd\",\n            \"userId\":\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate requests - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\", \"Request must be unique\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"inactiveapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        },\n        {\n            \"itemId\": \"inactiveapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setting many policies w/ different item types - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"inactiveapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        },\n        {\n            \"itemId\": \"inactiveapd.integration-iudx.io\",\n            \"itemType\": \"resource_server\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman trustee setting policy for non existent APD - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"thisdoesnotexist.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        },\n                {\n            \"itemId\": \"inactiveapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman trustee setting policy for provider for inactive APD - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"inactiveapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Existing policy - [409]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"inactiveapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        },\n        {\n            \"itemId\": \"activeapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        },\n        {\n            \"itemId\": \"pendingapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman trustee setting policy for provider for pending APD - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"pendingapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman trustee setting policy for provider for TEST_APD_URL does not own - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\", \"Not allowed to create policies for resource\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"{{TEST_APD_URL}}\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Other trustee setting policy for provider for TEST_APD_URL - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{REJPROVIDER_DELEGATE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"{{TEST_APD_URL}}\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Provider setting APD policies",
					"item": [
						{
							"name": "Provider cannot set APD policy for activeapd.integration-iudx.io - no trustee policy - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\", \"No auth policy for user by trustee\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"activeapd.integration-iudx.io\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Postman trustee setting policy for provider for active APD - [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"activeapd.integration-iudx.io\",\n            \"itemType\": \"apd\",\n            \"userId\": \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\",\n            \"constraints\": {}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider cannot set APD policy for pendingapd.integration-iudx.io - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"pendingapd.integration-iudx.io\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider cannot set APD policy for inactiveapd.integration-iudx.io - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"inactiveapd.integration-iudx.io\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider cannot set APD policy for non-existent APD - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"nonexistentapd.integration-iudx.io\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid itemId - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\",\"Item does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a5dandjns05/rs.iudx.io/iasd\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid itemId:itemType mapping - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a5dandjns05/rs.iudx.io/iasd\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Item does not belong to provider - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\",\"Not allowed to create policies for resource\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/9c13a2308bb0919bf146be8681eb886922d29282/rs.iudx.io/invalid-resource-for-ownership-test\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate APD policies for a resource (same APD, different userclasses)- [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\",\"Request must be unique\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestDeny\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate APD policies for a resource (different APDs)- [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\",\"Request must be unique\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"activeapd.integration-iudx.io\",\n            \"userClass\": \"TestDeny\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate APD policies for a resource (different expiry)- [400] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\",\"Request must be unique\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\": \"2030-01-01T01:01:01\"\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            },\n            \"expiryTime\": \"2030-12-01T01:01:01\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set APD policy for RSG integration-test-rsg-one (API constraint, TestAllow userclass) and USER policy for RSI integration-test-rsg-one/test-resource-one (sub constraint) all for consumer- [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"constraints\": {\n                \"access\": [\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Auth delegate setting APD policies",
					"item": [
						{
							"name": "Item does not belong to provider - [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
											"    pm.expect(body).to.have.property(\"title\",\"Not allowed to create policies for resource\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/9c13a2308bb0919bf146be8681eb886922d29282/rs.iudx.io/invalid-resource-for-ownership-test\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set  APD policy for RSI integration-test-rsg-two/test-resource-one, two (API constraint, TestDeny, TestDenyNInteraction) for consumer- [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
										"type": "text"
									},
									{
										"key": "providerId",
										"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestDeny\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        },\n         {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-two\",\n            \"itemType\": \"resource\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestDenyNInteraction\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
									"host": [
										"{{AUTH_ENDPOINT}}"
									],
									"path": [
										"auth",
										"v1",
										"policies"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Token API w/ User policies and APD policies",
			"item": [
				{
					"name": "Consumer get token for integration-test-rsg-one (APD policy for it)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"",
									"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"sub\");",
									"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
									"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
									"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one\");",
									"    pm.expect(result.role).to.be.eq(\"consumer\");",
									"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.cons).to.not.be.empty;",
									"    pm.expect(result.cons.access).to.contain(\"api\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer get token for integration-test-rsg-one/test-resource-one (User policy for it)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"",
									"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"sub\");",
									"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
									"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
									"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-one/test-resource-one\");",
									"    pm.expect(result.role).to.be.eq(\"consumer\");",
									"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.cons).to.not.be.empty;",
									"    pm.expect(result.cons.access).to.contain(\"sub\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer cannot get token for integration-test-rsg-two (No user or APD policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer cannot get token for integration-test-rsg-two/test-resource-one (APD policy, but will return deny)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"    pm.expect(body.detail).to.include(\"APD\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer gets APD token for integration-test-rsg-two/test-resource-one  (DenyNeedsInteraction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingInformation\");",
									"    pm.expect(body.detail).to.include(\"APD\");",
									"    let apdUrl = pm.environment.get(\"TEST_APD_URL\"); ",
									"    pm.expect(body).to.have.property(\"context\");",
									"    const result = body.context;",
									"    pm.expect(result).to.have.property(\"apdToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(apdUrl);",
									"",
									"    pm.environment.set(\"INTROSPECT_TOKEN\", result.apdToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-two\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect APD token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    let apdUrl = pm.environment.get(\"TEST_APD_URL\"); ",
									"    pm.expect(result).to.have.property(\"sub\");",
									"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
									"    pm.expect(result.aud).to.be.eq(apdUrl);",
									"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.sid).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"introspect"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Additional Token tests with APD and user policies",
			"item": [
				{
					"name": "Provider set APD policy for RSG integration-test-rsg-two for consumer (allow, API constraint)- [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"apdId\": \"{{TEST_APD_URL}}\",\n            \"userClass\": \"TestAllow\",\n            \"constraints\": {\n                \"access\": [\n                    \"api\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer can now get token for integration-test-rsg-two - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"",
									"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"sub\");",
									"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
									"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
									"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\");",
									"    pm.expect(result.role).to.be.eq(\"consumer\");",
									"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.cons).to.not.be.empty;",
									"    pm.expect(result.cons.access).to.contain(\"api\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider set User policy for RSG integration-test-rsg-two for consumer (Sub constraint)- [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n            \"itemType\": \"resource_group\",\n            \"userId\": \"{{CONSUMER_GMAIL_USERID}}\",\n            \"constraints\": {\n                \"access\": [\n                    \"sub\"\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer get's token for integration-test-rsg-two but with sub constraint (user policy activates) - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"",
									"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\",\n    \"itemType\": \"resource_group\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect rsg token - will have sub constraint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"sub\");",
									"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
									"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
									"    pm.expect(result.iid).to.be.eq(\"rg:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two\");",
									"    pm.expect(result.role).to.be.eq(\"consumer\");",
									"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.cons).to.not.be.empty;",
									"    pm.expect(result.cons.access).to.contain(\"sub\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer gets token for integration-test-rsg-two/test-resource-one but with sub constraint (user policy for resource group supercedes APD policy) [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"accessToken\");",
									"    pm.expect(result.expiry).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.server).to.be.eq(\"rs.iudx.io\");",
									"",
									"    pm.environment.set(\"INTROSPECT_TOKEN\", result.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"itemId\": \"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/token",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect token - will have sub constraint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const moment = require('moment');",
									"",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    const result = body.results;",
									"    pm.expect(result).to.have.property(\"sub\");",
									"    pm.expect(result.iss).to.be.eq(\"authorization.iudx.io\");",
									"    pm.expect(result.aud).to.be.eq(\"rs.iudx.io\");",
									"    pm.expect(result.iid).to.be.eq(\"ri:datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/rs.iudx.io/integration-test-rsg-two/test-resource-one\");",
									"    pm.expect(result.role).to.be.eq(\"consumer\");",
									"    pm.expect(result.exp).to.be.greaterThan(moment().unix());",
									"    pm.expect(result.cons).to.not.be.empty;",
									"    pm.expect(result.cons.access).to.contain(\"sub\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accessToken\" : \"{{INTROSPECT_TOKEN}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/introspect",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"introspect"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List APD policies",
			"item": [
				{
					"name": "Postman.trustee viewing policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    let apdcount = 0;",
									"    let id_array = [];",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) => {",
									"        if(r.itemType === 'apd'){",
									"            pm.expect(r.user.id).to.be.eq(\"13d47a5a-213b-4ac8-b4db-10dbc70c48af\");",
									"            pm.expect(r.user.email).to.be.eq(\"postman.provider-admin@datakaveri.org\");",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"            apdcount++;",
									"            id_array.push({id:r.policyId});",
									"    }",
									"    })",
									"    pm.environment.set(\"TRUSTEE_POLICY_IDS\", JSON.stringify(id_array));",
									"    pm.expect(apdcount).to.be.eq(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer cannot see any apd policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"       let id_array = [];",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) =>{",
									"            pm.expect(r.itemType).to.be.not.eq(\"apd\");",
									"            pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
									"            pm.expect(r.user.id).to.be.eq(pm.environment.get(\"CONSUMER_GMAIL_USERID\"));",
									"            pm.expect(r.user.email).to.be.eq(\"consumer@gmail.com\");",
									"            pm.expect(r.itemId.startsWith(\"datakaveri.org/0808eb81ea0e5773187ae06110f55915a55f5c05/\")).to.be.true;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"            id_array.push({id:r.policyId});",
									"    })",
									"    pm.environment.set(\"CONSUMER_POLICY_IDS\", JSON.stringify(id_array));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.provider viewing policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"       let id_array = [];",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) => {",
									"        if(\"apd\" in r){",
									"            pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
									"            pm.expect(r.user).to.not.exist;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"            pm.expect(r.apd.status).to.be.eq(\"active\");",
									"            pm.expect(r.apd.url).to.be.eq(pm.environment.get(\"TEST_APD_URL\"));",
									"            id_array.push({id:r.policyId});",
									"    }",
									"    pm.environment.set(\"APD_AND_USER_POLICY_IDS\", JSON.stringify(id_array.concat(JSON.parse(pm.environment.get(\"CONSUMER_POLICY_IDS\")))));",
									"",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman delegate auth delegate viewing policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) => {",
									"        if(\"apd\" in r){",
									"            pm.expect(r.owner.id == \"13d47a5a-213b-4ac8-b4db-10dbc70c48af\").to.be.true;",
									"            pm.expect(r.user).to.not.exist;",
									"            pm.expect(r.constraints).to.exist;",
									"            pm.expect(r.policyId).to.exist;",
									"            pm.expect(r.expiryTime).to.exist;",
									"            pm.expect(r.apd.status).to.be.eq(\"active\");",
									"            pm.expect(r.apd.url).to.be.eq(pm.environment.get(\"TEST_APD_URL\"));",
									"    }",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete user and APD policies",
			"item": [
				{
					"name": "Provider deleting APD and user policies together",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{APD_AND_USER_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider deleting again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{APD_AND_USER_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate deleting deleted policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{APD_AND_USER_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider trying to delete trustee policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{TRUSTEE_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.trustee deleting trustee policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{TRUSTEE_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.trustee deleting same again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{TRUSTEE_POLICY_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.provider viewing policies after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"       let id_array = [];",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) => {",
									"    pm.expect(r).to.not.haveOwnProperty(\"apd\");",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman.trustee viewing policies after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body.results).to.not.be.empty;",
									"    body.results.forEach((r) => {",
									"    pm.expect(r.itemType).to.not.be.eq(\"apd\");",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_TRUSTEE_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Delegations",
			"item": [
				{
					"name": "No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "No request key - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hello\":1234\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request array invalid objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [1,2,{}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate objects- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"id\": \"921f439e-7c9b-40b4-b6a7-9cb1e6771eef\"\n        },\n        {\n            \"id\": \"921f439e-7c9b-40b4-b6a7-9cb1e6771eef\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "No profile calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{NO_PROFILE_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": [\n        {\n            \"id\": \"921f439e-7c9b-40b4-b6a7-9cb1e6771eef\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer calling API - [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{CONSUMER_GMAIL_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{POSTMAN_PROVIDER_DELEGATION_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Other Provider calling API  - [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ALL_ROLES_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{POSTMAN_PROVIDER_DELEGATION_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate fail to delete (since auth delegation present in array)- [403]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{POSTMAN_PROVIDER_DELEGATION_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider calling API successfully - [200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{POSTMAN_PROVIDER_DELEGATION_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Provider trying to delete again- [400]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_PROVIDER_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{POSTMAN_PROVIDER_DELEGATION_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth delegate not permitted to call API (auth delegation deleted)- [401]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Invalid delegate request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{POSTMAN_DELEGATE_TOKEN}}",
								"type": "text"
							},
							{
								"key": "providerId",
								"value": "13d47a5a-213b-4ac8-b4db-10dbc70c48af",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {{POSTMAN_PROVIDER_DELEGATION_IDS}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{AUTH_ENDPOINT}}/auth/v1/policies/delegations",
							"host": [
								"{{AUTH_ENDPOINT}}"
							],
							"path": [
								"auth",
								"v1",
								"policies",
								"delegations"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}